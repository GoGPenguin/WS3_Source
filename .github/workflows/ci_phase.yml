name: CI Phase

on:
  push:
    branches: ["secretRegistry"]

jobs:
  build_dev:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_URL: ${{ secrets.ECR_SECRET_URL }}
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL_DEV }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
      ARTIFACT_BUCKET_NAME: ${{ secrets.ARTIFACT_BUCKET_NAME }}

      TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
      TASK_EXECUTION_ROLE_ARN: ${{ secrets.TASK_EXECUTION_ROLE_ARN }}
      AWS_REGION: ap-southeast-1
      API_PORT: ${{ secrets.API_PORT }}
      SUBNET_ID_A: ${{ secrets.SUBNET_ID_A }}
      SUBNET_ID_B: ${{ secrets.SUBNET_ID_B }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 6

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Check Docker version
        run: docker --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
        continue-on-error: false

      - name: Pre-build
        run: |
          cd server
          touch .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME}}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST}}" >> .env


          envsubst < deploy/aws/appspec_template.yml > appspec.yml
          envsubst < deploy/aws/taskdef_template.json > taskdef.json
        continue-on-error: false

      - name: Build and push server
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          cd server
          docker build -t "server:${{ env.SHA }}" .
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ env.ECR_URL }}
          docker tag "server:${{ env.SHA }}" "${{ env.ECR_URL }}:${{ env.SHA }}"
          docker push "${{ env.ECR_URL }}:${{ env.SHA }}"

          printf '{"ImageURI":"%s"}' $ECR_URL:$SHA > imageDetail.json

          zip appspec.zip appspec.yml imageDetail.json taskdef.json
          ls -la 
          cat imageDetail.json
          aws s3 cp appspec.zip s3://${{ env.ARTIFACT_BUCKET_NAME }}
        continue-on-error: false
